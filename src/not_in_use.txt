 struct Mesh
    {

    public:
        Mesh()
        {
            m_VAO = 0;
            m_VBOs = std::vector<GLuint>();
        }

        GLuint m_VAO;
        std::vector<GLuint> m_VBOs;

        void init()
        {
            glGenVertexArrays(1, &m_VAO);
            glBindVertexArray(m_VAO);
        }

        void cleanup()
        {
            for (GLuint b : m_VBOs)
            {
                glDeleteBuffers(1, &b);
            }
            glDeleteVertexArrays(1, &m_VAO);
        }

        template <typename T>
        void attach_buffer(T *data, uint32_t len, GLenum buffer_type)
        {
            GLuint gVBO = 0;

            glGenBuffers(1, &gVBO);
            glBindBuffer(buffer_type, gVBO);
            glBufferData(buffer_type, len * sizeof(T), data, GL_STATIC_DRAW);

            m_VBOs.push_back(gVBO);
        }

        void bind()
        {
            glBindVertexArray(m_VAO);
        }

        void draw_elements(GLenum mode, GLsizei count)
        {
            glDrawElements(mode, count, GL_UNSIGNED_INT, NULL);
        }

        void draw_arrays(GLenum mode, GLsizei count)
        {
            glDrawArrays(mode, 0, count);
        }
    };